function nii_combine(dirname,baseFilename)
% -----------------------------------------------------------------------------------
% Author: Neerav Goswami (Sommer Lab), 2023
%
% Processes and combines the output files generated by SPM (c1NHP_T,c2NHP_T...) 
% into a singular segmentation file that can be overlayed on top of an MRI
% image. Requires functions binaryMaskGenerate and remove_outer_pixels.
%
% inputs:
%
% dirname - full path to folder containing SPM output files
% Ex: 'D:\NHP_MRIs\'
%
% baseFilename - character array containing the name of the MRI image used
% to generate SPM segmentation files
% Ex: 'NHP_T'
% -----------------------------------------------------------------------------------

disp('loading data...')
cd(dirname)
air = niftiread([dirname '\c6' baseFilename '.nii']);
skin = niftiread([dirname '\c5' baseFilename '.nii']);
bone = niftiread([dirname '\c4' baseFilename '.nii']);
csf = niftiread([dirname '\c3' baseFilename '.nii']);
gray = niftiread([dirname '\c1' baseFilename '.nii']);
white = niftiread([dirname '\c2' baseFilename '.nii']);
nii_info = niftiinfo([dirname '\c2' baseFilename '.nii']);

% load the masks
gray_temp = gray; white_temp = white; csf_temp = csf;
bone_temp = bone; skin_temp = skin; air_temp = air;

%smooth
disp('smoothing masks...')
gray_temp = imgaussfilt3(gray_temp,0.1);
white_temp = imgaussfilt3(white_temp,0.1);
csf_temp = imgaussfilt3(csf_temp,0.05);
bone_temp = imgaussfilt3(bone_temp,0.2);
skin_temp = imgaussfilt3(skin_temp,0.5);
air_temp = imgaussfilt3(air_temp,0.5);

disp('creating binary masks...')
[empt_temp,gray_temp,white_temp,csf_temp,bone_temp,skin_temp,air_temp]...
    = binaryMaskGenerate(gray_temp,white_temp,csf_temp,bone_temp,skin_temp,air_temp);
% Create binary mask for each tissue class

% disp('fixing CSF continuity...')
se=ones(3,3,3);
dcsf=imdilate(csf_temp, se);
dbone=imdilate(bone_temp, se);
contin=(empt_temp&dcsf)|(dbone&gray_temp)|(dbone&white_temp);
csf_temp=csf_temp|contin;

[~,csf_temp,bone_temp,gray_temp]...
    = binaryMaskGenerate(csf_temp,bone_temp,gray_temp); % NOTE: no removal, then no empty voxel generated
% Fix csf continuity

disp('generating and labeling empty voxels...')
empt_temp = binaryMaskGenerate(gray_temp,white_temp,csf_temp,bone_temp,skin_temp,air_temp);
% Generate unassigned voxels (empty voxels)

for j = 1:2 % usually all empty voxels will be labelled in two loops
    gray_fil = uint8(gray_temp)*255; white_fil = uint8(white_temp)*255;
    csf_fil = uint8(csf_temp)*255; bone_fil = uint8(bone_temp)*255;
    skin_fil = uint8(skin_temp)*255; air_fil = uint8(air_temp)*255;
    sigma = [1 1 1 1 1 1];
    gray_fil = imgaussfilt3(gray_fil,sigma(1));
    white_fil = imgaussfilt3(white_fil,sigma(2));
    csf_fil = imgaussfilt3(csf_fil,sigma(3));
    bone_fil = imgaussfilt3(bone_fil,sigma(4));
    skin_fil = imgaussfilt3(skin_fil,sigma(5));
    air_fil = imgaussfilt3(air_fil,sigma(6));
    
    [~,air_fil,gray_fil,white_fil,csf_fil,bone_fil,skin_fil]...
        = binaryMaskGenerate(air_fil,gray_fil,white_fil,csf_fil,bone_fil,skin_fil);

    gray_temp = (empt_temp&gray_fil)|gray_temp;
    white_temp = (empt_temp&white_fil)|white_temp;
    csf_temp = (empt_temp&csf_fil)|csf_temp;
    bone_temp = (empt_temp&bone_fil)|bone_temp;
    skin_temp = (empt_temp&skin_fil)|skin_temp;
    air_temp = (empt_temp&air_fil)|air_temp;
    
    empt_temp = xor(empt_temp,((empt_temp&gray_fil) | (empt_temp&white_fil) | (empt_temp&csf_fil)...
        | (empt_temp&bone_fil) | (empt_temp&skin_fil) | (empt_temp&air_fil))); % update empty voxels
end

% Relabel each empty voxel to its nearest tissue type
% The Gaussian filter is used to calculate distances, and max operation
% relabels each empty voxel based on the distances.

disp('saving results...')

gray = 255*double(gray_temp); 
white = 255*double(white_temp); 
csf = 255*double(csf_temp); 
bone = 255*double(bone_temp); 
skin = 255*double(skin_temp); 
final_img = (skin)*-5 + (bone)*-4 + (csf)*-3 + (gray)*-2 + (white)*-1;
final_img = final_img.*-1;
final_img = remove_outer_pixels(final_img);

nii_info.Datatype = 'double';
niftiwrite(final_img, [dirname '\' baseFilename 'Seg.nii'], nii_info, 'Compressed', true);

disp('DONE!')